package ds.learn.reactexample;

import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;

import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

import io.reactivex.Flowable;
import io.reactivex.Observable;
import io.reactivex.schedulers.Schedulers;

public class RX1 {

	public static void main(String[] args) throws Exception{
		//Flowable<String> obs1 = Flowable.just("un","deux","twah","quatre","cinq","six","sept","huit","neuf","dix");
		Executor exe = Executors.newCachedThreadPool();
		
		Subscriber subscriber = new Subscriber<Object>() {
			
			Subscription s;
			AtomicInteger count = new AtomicInteger(0);
			@Override
			public void onSubscribe(Subscription s) {
				this.s = s;
				s.request(40);
			}

			@Override
			public void onNext(Object t) {
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				System.out.println(" Subscribed :: "+t.toString());
			

				if (count.incrementAndGet()%20 == 0 && count.get() >= 40 ) {
					System.out.println(" Requesting 20 more !!! ");
					s.request(20);
				}
				
			}

			@Override
			public void onError(Throwable t) {
				t.printStackTrace();
			}

			@Override
			public void onComplete() {
				System.out.println(" Done !!!! ");
				
			}
		};
		
		exe.execute(() -> {
			//obs1
			Flowable.range(1, 1000)
			/*.doOnNext(data -> {
				System.out.println("Data Pushed from Flowable :: "+data);
			})*/
			.map(InnerRX1::new)
			.observeOn(Schedulers.io()) // Observable doesn't have control to push after this.
			.subscribe(subscriber);
			/*.subscribe((data) -> {
				Thread.sleep(50);
				System.out.println("Received by Subscriber :: "+data.a);
			});*/
		});
			
	}

}

final class InnerRX1 {
	Integer a;
	
	InnerRX1(Integer a) throws Exception{
		/*if ("deux".equals(a))
			Thread.sleep(1000);
		else if ("quatre".equals(a) || "sept".equals(a))
			Thread.sleep(500);*/
		this.a =a;
		System.out.println("Build :: "+this.a);
	}

	@Override
	public String toString() {
		return "InnerRX1 [a=" + a + "]";
	}
	
	
}
